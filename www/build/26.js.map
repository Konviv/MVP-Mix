{"version":3,"sources":["../../src/pages/insights/insights.module.ts","../../src/pages/insights/insights.ts"],"names":[],"mappings":"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","file":"26.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { InsightsPage } from './insights';\n\n@NgModule({\n  declarations: [\n    InsightsPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(InsightsPage),\n  ],\n})\nexport class InsightsPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/insights/insights.module.ts","import {Component, ViewChild} from '@angular/core';\nimport {IonicPage, NavController, NavParams, Slides} from 'ionic-angular';\nimport {AllInsightsPage} from \"../all-insights/all-insights\";\n\nimport {TestServiceProvider} from \"../../providers/test-service/test-service\";\n\n@IonicPage()\n@Component({\n  selector: 'page-insights',\n  templateUrl: 'insights.html',\n  providers: [TestServiceProvider]\n})\nexport class InsightsPage {\n\n  allTransactions = [];\n  amountSaved = 0;\n  numberOfTransactionsOver100 = 0;\n  monthlySpending = 0;\n  dailyAverage;\n\n  @ViewChild(Slides) slides: Slides;\n\n  constructor(public navCtrl: NavController, public navParams: NavParams, public testService: TestServiceProvider) {\n\n    // Get current month\n    var currentDate = new Date();\n    var currentMonth = currentDate.getUTCMonth();\n    var currentYear = currentDate.getUTCFullYear();\n\n    this.getInsights(currentMonth, currentYear);\n  }\n\n  // Get amount saved in specific category\n  getInsights(currentMonth, currentYear) {\n    this.testService.getTransactions()\n      .subscribe(\n        data => {\n          var category = \"Food and Drink\";\n          var totalDaysInMonth = new Date(currentYear, currentMonth, 0).getDate(); // Get total days in current month\n\n          this.allTransactions = data.result.map((data) => {\n            return {\n              name: data.name,\n              amount: data.amount,\n              category: data.category,\n              date: data.date\n            };\n          });\n\n          this.allTransactions.forEach(i => {\n\n            // Get number of transactions that are over $100\n            // Get month of transaction\n            var date = new Date(i.date);\n            var month = date.getUTCMonth();\n\n            // Increment counter\n            if (i.amount > 100 && month == currentMonth) {\n              this.numberOfTransactionsOver100++;\n            }\n\n            // Total spent this month\n            if(currentMonth == month) {\n              this.monthlySpending += i.amount;\n            }\n          });\n\n          // Get daily average to 2 decimal points\n          this.dailyAverage = this.monthlySpending / totalDaysInMonth;\n          this.dailyAverage = this.dailyAverage.toFixed(2);\n\n          // Get all transaction of given category\n          this.allTransactions = this.allTransactions.filter(function(i) {\n            return (i.category == category);\n          });\n\n          this.allTransactions.forEach(i => {\n            var amountSpentLastMonth = 0;\n            var amountSpentThisMonth = 0;\n\n            // Get month of transaction\n            var date = new Date(i.date);\n            var month = date.getUTCMonth();\n\n            // Calculate amount spent previous month\n            if (month == (currentMonth-1)) {\n              amountSpentLastMonth += i.amount;\n            }\n\n            // Calculate amount spent this month\n            if (month == currentMonth) {\n              amountSpentThisMonth += i.amount;\n            }\n\n            this.amountSaved = amountSpentLastMonth - amountSpentThisMonth;\n          })\n        }\n      )\n  }\n\n  pushAllInsights() {\n    this.navCtrl.push(AllInsightsPage);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/insights/insights.ts"],"sourceRoot":""}